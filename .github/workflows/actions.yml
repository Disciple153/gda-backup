name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  pull_request:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  generate-version:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    permissions:
      contents: write

    steps:
    - name: Bump version and push tag
      id: tagger
      uses: anothrNick/github-tag-action@1.66.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PRERELEASE: true
        DEFAULT_BUMP: minor
    - name: Print tag
      run: echo  ${{ steps.tagger.outputs.tag }}

    outputs:
      version_tag: ${{ steps.tagger.outputs.tag }}

  rust-test:
    runs-on: ubuntu-latest
    if: false

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ vars.AWS_REGION }}
        role-session-name: GitHub-OIDC-gda-backup
    - name: Install diesel
      run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/diesel-rs/diesel/releases/download/v2.2.0/diesel_cli-installer.sh | sh
    - name: Initialize database
      run: diesel migration run --database-url postgres://postgres:${{ secrets.POSTGRES_PASSWORD }}@localhost/postgres
    - name: Run tests
      run: cargo test --verbose

  rust-release:

    runs-on: ubuntu-latest
    needs: generate-version

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Build
      run: cargo build --release

    - name: Prepare release
      run: |
        mkdir -p ./release
        cp ./target/release/gda_backup ./release/gda_backup
        cp ./diesel.toml ./release/diesel.toml
        cp -r ./migrations ./release/migrations
        cd release
        zip -r9 ../gda_backup.zip *

    - name: Deploy release
      uses: ncipollo/release-action@v1
      if: github.event.pull_request.merged == true
      with:
        artifacts: gda_backup.zip
        name: ${{ needs.generate-version.outputs.version_tag }}
        tag: ${{ needs.generate-version.outputs.version_tag }}
        body: ${{ github.event.pull_request.title }}

  docker-test:
    runs-on: ubuntu-latest
    permissions: write-all
    if: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # # Set up BuildKit Docker container builder to be able to build
      # # multi-platform images and export cache
      # # https://github.com/docker/setup-buildx-action
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Build docker image
        run: |
          # Build docker image.
          docker build -t ghcr.io/disciple153/gda-backup:latest .

      - name: Test docker image
        run: |
          # Create test files.
          mkdir -p ./backup_test
          touch ./backup_test/test.txt
          touch ./backup_test/test.md

          # Run compose file.
          docker compose up -d

          # Wait for backup to trigger.
          sleep 65

          # Get backup logs
          output=$(docker logs gda-backup-gda_backup-1)
          echo $output

          # Tear down docker containers
          docker compose down

          # Check to see if backup succeeded
          if [[ $output != *"Backup complete: 1 succeeded, 0 failed."* ]]; then
            echo 'Dry run failed. Expected: "Backup complete: 1 succeeded, 0 failed."'
            exit 1
          fi

          echo Dry run succeeded!
  
  docker-release:
    runs-on: ubuntu-latest
    needs: generate-version
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event.pull_request.merged == true
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: "v2.2.4"

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event.pull_request.merged == true
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            ${{ needs.generate-version.outputs.version_tag }}
            latest
      
      - name: Print tags
        run: |
          echo Tags: ${{ steps.meta.outputs.tags }}
          echo Labels: ${{ steps.meta.outputs.labels }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: github.event.pull_request.merged == true
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: github.event.pull_request.merged == true
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
        